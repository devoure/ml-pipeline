# PIPELINE DEFINITION
# Name: housing-ml-pipeline
# Description:  A simple yet challenging project, to predict the housing price based on certain factors like house area, bedrooms, furnished, nearness to mainroad, etc. The dataset is small yet, it's complexity arises due to the fact that it has strong multicollinearity. 
components:
  comp-load-data:
    executorLabel: exec-load-data
  comp-process-data:
    executorLabel: exec-process-data
  comp-train-data:
    executorLabel: exec-train-data
deploymentSpec:
  executors:
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data():\n    import pandas as pd\n    from minio import\
          \ Minio\n    import io\n\n    minio_client = Minio(\n        \"192.168.1.201:9090\"\
          ,\n        access_key=\"minio\",\n        secret_key=\"minio123\",\n   \
          \     secure=False\n        )\n\n    user_id = \"34445\"\n\n    # Bucket\
          \ name with user id\n    bucket_name = user_id\n    thedataset = 'Housing.csv'\n\
          \n    try:\n        res = minio_client.get_object('housing', thedataset)\n\
          \n    except Exception as err:\n        print(err)\n\n    housing = pd.read_csv(io.BytesIO(res.data))\n\
          \    data = pd.DataFrame(housing)\n\n    encodeddata = data.to_csv(index=False).encode(\"\
          utf-8\")\n\n    try:\n        if not minio_client.bucket_exists(bucket_name):\n\
          \            minio_client.make_bucket(bucket_name)\n        minio_client.put_object(\n\
          \                bucket_name,\n                'data.csv',\n           \
          \     data=io.BytesIO(encodeddata),\n                length=len(encodeddata),\n\
          \                content_type='application/csv'\n                )\n   \
          \ except Exception as err:\n        print(err)\n\n"
        image: devourey/scikit-sandbox:latest
    exec-process-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - process_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef process_data():\n    import pandas as pd\n    from sklearn.model_selection\
          \ import train_test_split\n    from minio import Minio\n    import io\n\
          \    from sklearn.preprocessing import StandardScaler\n\n\n    minio_client\
          \ = Minio(\n        \"192.168.1.201:9090\",\n        access_key=\"minio\"\
          ,\n        secret_key=\"minio123\",\n        secure=False\n        )\n\n\
          \    user_id = \"34445\"\n\n    bucket_name = user_id\n    try:\n      \
          \  res = minio_client.get_object(bucket_name, 'data.csv')\n\n    except\
          \ Exception as err:\n        print(err)\n\n    data = pd.read_csv(io.BytesIO(res.data))\n\
          \    data = pd.DataFrame(data)\n\n    columns_to_drop = [\"hotwaterheating\"\
          , \"guestroom\", \"parking\", \"airconditioning\"]\n    data = data.drop(columns=columns_to_drop)\n\
          \    data.replace({'yes':1, 'no':0}, inplace=True)\n    data.replace({'semi-furnished':50,\
          \ 'unfurnished':0, 'furnished':100}, inplace=True)\n\n    X = data[[\"area\"\
          ,\"bedrooms\", \"stories\", \"furnishingstatus\", \"mainroad\"]]\n    y\
          \ = data[\"price\"]\n\n    X_train, X_test, y_train, y_test = train_test_split(X,\
          \ y, test_size=0.2, random_state=42)\n\n    X_scale_fields = [\"area\",\
          \ \"bedrooms\", \"stories\", \"furnishingstatus\"]\n    scaler = StandardScaler()\n\
          \n    X_train[X_scale_fields] = scaler.fit_transform(X_train[X_scale_fields])\n\
          \    X_test[X_scale_fields] = scaler.transform(X_test[X_scale_fields])\n\
          \n    X_train_bytes = X_train.to_csv(index=False).encode(\"utf-8\")\n  \
          \  X_test_bytes = X_test.to_csv(index=False).encode(\"utf-8\")\n    y_train_bytes\
          \ = y_train.to_csv(index=False).encode(\"utf-8\")\n    y_test_bytes = y_test.to_csv(index=False).encode(\"\
          utf-8\")\n\n    try:\n        if not minio_client.bucket_exists(bucket_name):\n\
          \            minio_client.make_bucket(bucket_name)\n        minio_client.put_object(\n\
          \                bucket_name,\n                'X-train.csv',\n        \
          \        data=io.BytesIO(X_train_bytes),\n                length=len(X_train_bytes),\n\
          \                content_type = \"application/csv\"\n                )\n\
          \        minio_client.put_object(\n                bucket_name,\n      \
          \          'X-test.csv',\n                data=io.BytesIO(X_test_bytes),\n\
          \                length=len(X_test_bytes),\n                content_type\
          \ = \"application/csv\"\n                )\n        minio_client.put_object(\n\
          \                bucket_name,\n                'y-train.csv',\n        \
          \        data=io.BytesIO(y_train_bytes),\n                length=len(y_train_bytes),\n\
          \                content_type = \"application/csv\"\n                )\n\
          \        minio_client.put_object(\n                bucket_name,\n      \
          \          'y-test.csv',\n                data=io.BytesIO(y_test_bytes),\n\
          \                length=len(y_test_bytes),\n                content_type\
          \ = \"application/csv\"\n                )\n\n    except Exception as err:\n\
          \        print(err)\n\n"
        image: devourey/scikit-sandbox:latest
    exec-train-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_data():\n    import pandas as pd\n    from sklearn.linear_model\
          \ import LinearRegression\n    from minio import Minio\n    import io\n\
          \    import mlflow\n    import mlflow.sklearn\n    from sklearn.metrics\
          \ import mean_absolute_error, mean_squared_error, r2_score\n    import numpy\
          \ as np\n\n    user_id = \"34445\"\n\n    minio_client = Minio(\n      \
          \  \"192.168.1.201:9090\",\n        access_key=\"minio\",\n        secret_key=\"\
          minio123\",\n        secure=False\n        )\n\n    bucket_name = user_id\n\
          \    try:\n        res_for_X = minio_client.get_object(bucket_name, 'X-train.csv')\n\
          \        res_for_y = minio_client.get_object(bucket_name, 'y-train.csv')\n\
          \        res_for_X_test = minio_client.get_object(bucket_name, 'X-test.csv')\n\
          \        res_for_y_test = minio_client.get_object(bucket_name, 'y-test.csv')\n\
          \n    except Exception as err:\n        print(err)\n\n    X_train = pd.read_csv(io.BytesIO(res_for_X.data))\n\
          \    y_train = pd.read_csv(io.BytesIO(res_for_y.data))\n    X_test = pd.read_csv(io.BytesIO(res_for_X_test.data))\n\
          \    y_test = pd.read_csv(io.BytesIO(res_for_y_test.data))\n\n    X_train\
          \ = pd.DataFrame(X_train)\n    y_train = pd.DataFrame(y_train)\n\n    #\
          \ Set tracking URI to the location of your MLflow server\n    mlflow.set_tracking_uri(\"\
          http://192.168.1.201:5000\")\n\n    # Set up a shared experiment\n    experiment_name\
          \ = \"Housing\"\n    mlflow.set_experiment(experiment_name)\n\n    # Set\
          \ user parameters\n    user_params = {\n    \"developer\": \"Athumani Bakari\"\
          ,\n    \"algorithm\": \"Linear Regression\",\n    }\n\n    # User 1\n  \
          \  with mlflow.start_run():\n        mlflow.log_params(user_params)\n\n\
          \        lr = LinearRegression()\n        model = lr.fit(X_train, y_train)\n\
          \        y_pred = model.predict(X_test)\n        y_pred_2 = model.predict(X_train)\n\
          \n\n\n        # Compute evaluation metrics\n        mae = mean_absolute_error(y_test,\
          \ y_pred)\n        mse = mean_squared_error(y_test, y_pred)\n        rmse\
          \ = np.sqrt(mse)\n        r2 = r2_score(y_test, y_pred)\n        overfitting\
          \ = (r2_score(y_train, y_pred_2) * 100)\n\n\n        mlflow.log_metric(\"\
          mean_absolute_error\", mae)\n        mlflow.log_metric(\"mean_squared_error\"\
          , mse)\n        mlflow.log_metric(\"rmse\", mse)\n        mlflow.log_metric(\"\
          accuracy\", (r2 * 100))\n        mlflow.log_metric(\"overfitting\", overfitting)\n\
          \n\n\n        mlflow.sklearn.log_model(model, \"model.pkl\")\n\n"
        image: devourey/scikit-pipeline:latest
pipelineInfo:
  description: ' A simple yet challenging project, to predict the housing price based
    on certain factors like house area, bedrooms, furnished, nearness to mainroad,
    etc. The dataset is small yet, it''s complexity arises due to the fact that it
    has strong multicollinearity. '
  name: housing-ml-pipeline
root:
  dag:
    tasks:
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        taskInfo:
          name: load-data
      process-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-process-data
        dependentTasks:
        - load-data
        taskInfo:
          name: process-data
      train-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-data
        dependentTasks:
        - process-data
        taskInfo:
          name: train-data
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
